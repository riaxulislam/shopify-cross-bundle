{% comment %}
  Bundle Selector Section
  This section includes the original bundle selector code (unchanged) and a cart display section to show selected products under the bundle on the cart page.
  Modified to ensure subscription (offer) price and details are included and displayed in the cart.
  Fixed schema error: corrected "deepened" to "header" in schema settings.
  Updated cart page to display subscription plan details if applicable.
  Fixed duplicate add-to-cart issue for subscriptions by isolating the app widget and preventing independent submissions.
  Updated: Hide price in Add to Cart button as requested.
{% endcomment %}

{% comment %}
  Bundle Selector Section (Original Code, Updated for Subscription Fix and Button Price Hide)
  Cart page code has been removed as requested.
{% endcomment %}
<div class="bundle-section">
  <!-- Product Details Section -->
  <div class="bundle-container">
    <!-- Left side: Main product image -->
    <div class="bundle-image" data-variant-id="{{ product.variants[0].id }}">
      <img src="{{ product.featured_image | img_url: '800x' }}" alt="{{ product.title }}">
    </div>

    <!-- Right side: Bundle selection -->
    <div class="bundle-options">
      {% if section.settings.show_product_details %}
        <div class="product-details-section">
          <div class="product-details-container">
            <div class="product_title_left">
              <h1 class="product-title">{{ section.settings.product_title | default: product.title }}</h1>
              <div class="product-price" id="main-product-price">{{ section.settings.product_price | default: product.price | money }}</div>
              {% if section.settings.product_reviews %}
                <div class="product-reviews">{{ section.settings.product_reviews }}</div>
              {% endif %}
            </div>
          </div>
        </div>
      {% endif %}

      <!-- Bundle Title -->
      {% if section.settings.bundle_title %}
        <h2 class="bundle-title">{{ section.settings.bundle_title }}</h2>
      {% endif %}

      <!-- Tabs for bundles -->
      <div class="bundle-tabs">
        {% if section.settings.show_bundle_1 %}
          <button class="bundle-tab active" data-bundle="1" data-limit="{{ section.settings.bundle_limit_1 }}" data-variant-id="{{ variant1.id }}">
            {{ section.settings.bundle_tab_text_1 | default: section.settings.bundle_name_1 }}
            {% if section.settings.show_best_deal_1 %}
              <span class="best-deal-badge">{{ section.settings.best_deal_text | default: "Best Deal" }}</span>
            {% endif %}
          </button>
        {% endif %}
        {% if section.settings.show_bundle_2 %}
          <button class="bundle-tab" data-bundle="2" data-limit="{{ section.settings.bundle_limit_2 }}" data-variant-id="{{ variant2.id }}">
            {{ section.settings.bundle_tab_text_2 | default: section.settings.bundle_name_2 }}
            {% if section.settings.show_best_deal_2 %}
              <span class="best-deal-badge">{{ section.settings.best_deal_text | default: "Best Deal" }}</span>
            {% endif %}
          </button>
        {% endif %}
        {% if section.settings.show_bundle_3 %}
          <button class="bundle-tab" data-bundle="3" data-limit="{{ section.settings.bundle_limit_3 }}" data-variant-id="{{ variant3.id }}">
            {{ section.settings.bundle_tab_text_3 | default: section.settings.bundle_name_3 }}
            {% if section.settings.show_best_deal_3 %}
              <span class="best-deal-badge">{{ section.settings.best_deal_text | default: "Best Deal" }}</span>
            {% endif %}
          </button>
        {% endif %}
      </div>

      <!-- Enhanced Step Progress Bar -->
      <div class="progress-bar-container">
        <div class="step-progress" id="bundle-step-indicator">
          <div class="step-connector"></div>
        </div>
        <span class="progress-text">0/{{ section.settings.bundle_limit_1 }}</span>
      </div>

      <div id="bundle-message"></div>

      <!-- Bundle Price -->
      <div class="bundle-price"></div>

      <!-- Products grid (3 per row) -->
      <div class="bundle-products">
        {% for block in section.blocks %}
          {% if block.type == 'product' %}
            <div class="bundle-product" data-product-id="{{ all_products[block.settings.product].id }}" data-variant-id="{{ all_products[block.settings.product].variants[0].id }}" data-product-title="{{ all_products[block.settings.product].title }}">
              <img src="{% if block.settings.custom_image %}{{ block.settings.custom_image | img_url: '200x' }}{% else %}{{ all_products[block.settings.product].featured_image | img_url: '200x' }}{% endif %}" alt="{{ all_products[block.settings.product].title }}">
              {% if block.settings.flavor_info %}
                <button class="flavor-info-btn" onclick="showFlavorInfo('{{ block.settings.flavor_info | escape }}', '{{ all_products[block.settings.product].title | escape }}')">ℹ️</button>
              {% endif %}
              <div class="bundle-product-actions">
                <button class="select-btn">{{ section.settings.select_text }}</button>
                <div class="quantity-controls" style="display:none;">
                  <button class="qty-minus">-</button>
                  <span class="qty-value">1</span>
                  <button class="qty-plus">+</button>
                </div>
              </div>
            </div>
          {% endif %}
        {% endfor %}
      </div>

      <!-- App Widgets (Subscription Widget Isolated) -->
      <div class="app-widgets" id="app-widgets">
        <div id="subscription-widget-container">
          {% for block in section.blocks %}
            {% if block.type == '@app' %}
              <div class="app-widget" data-block-id="{{ block.id }}">
                {% render block %}
              </div>
            {% endif %}
          {% endfor %}
        </div>
      </div>

      <!-- Add to Cart Form -->
      <form method="post" action="/cart/add" id="bundle-product-form-{{ product.id }}" class="bundle-product-form">
        <input type="hidden" name="id" id="selected-variant-id" value="{{ product.selected_or_first_available_variant.id }}">
        <button id="add-bundle-to-cart" disabled>Add Bundle to Cart</button>
      </form>
    </div>
  </div>

  <!-- Sticky Bottom Bar -->
  <div class="sticky-bottom-bar">
    <div class="sticky-content">
      <div class="sticky-price" id="sticky-price">{{ prices[activeBundle] | default: product.price | money }}</div>
      <button id="sticky-add-to-cart" disabled>Add Bundle to Cart</button>
    </div>
  </div>
</div>

<!-- Flavor Info Popup -->
<div id="flavor-popup" class="flavor-popup">
  <div class="flavor-popup-content">
    <span class="flavor-popup-close">&times;</span>
    <h3 id="flavor-popup-title"></h3>
    <p id="flavor-popup-info"></p>
  </div>
</div>

{% assign variant1 = product.variants | where: "title", section.settings.bundle_name_1 | first %}
{% if variant1 == nil %}
  {% assign variant1 = product.variants.first %}
{% endif %}

{% assign variant2 = product.variants | where: "title", section.settings.bundle_name_2 | first %}
{% if variant2 == nil %}
  {% assign variant2 = product.variants[1] | default: product.variants.first %}
{% endif %}

{% assign variant3 = product.variants | where: "title", section.settings.bundle_name_3 | first %}
{% if variant3 == nil %}
  {% assign variant3 = product.variants[2] | default: product.variants.first %}
{% endif %}

<style>
  /* Color Schema */
  .bundle-section { background-color: {{ section.settings.section_background_color }}; }
  .bundle-options { background-color: {{ section.settings.options_background_color }}; }
  .bundle-tabs { background: {{ section.settings.tabs_container_background }}; }
  .bundle-tab { background: {{ section.settings.tab_background_color }}; color: {{ section.settings.tab_text_color }}; border-color: {{ section.settings.tab_border_color }}; position: relative; }
  .bundle-tab.active { background: {{ section.settings.tab_active_background }}; color: {{ section.settings.tab_active_text_color }}; }
  .bundle-product { background: {{ section.settings.product_card_background }}; border: 1px solid {{ section.settings.product_card_border }}; }
  .select-btn { background: {{ section.settings.select_button_background }}; color: {{ section.settings.select_button_text_color }}; border: 1px solid {{ section.settings.select_button_border }}; }
  .select-btn:hover { background: {{ section.settings.select_button_hover_background }}; }
  .quantity-controls { background: {{ section.settings.quantity_background }}; border: 1px solid {{ section.settings.quantity_border_color }}; }
  .qty-minus, .qty-plus { background: {{ section.settings.quantity_button_background }}; color: {{ section.settings.quantity_button_text_color }}; border: 1px solid {{ section.settings.quantity_button_border }}; }
  .qty-minus:hover, .qty-plus:hover { background: {{ section.settings.quantity_button_hover_background }}; }
  .qty-value { color: {{ section.settings.quantity_text_color }}; }
  #bundle-message { font-size: 16px; color: #28a745; text-align: center; height: 30px; width: 100%; display: block; }
  .progress-text { color: {{ section.settings.progress_text_color }}; }
  .bundle-price { color: {{ section.settings.price_text_color }}; }
  #add-bundle-to-cart { background: {{ section.settings.add_to_cart_background }}; color: {{ section.settings.add_to_cart_text_color }}; }
  #add-bundle-to-cart:hover { background: {{ section.settings.add_to_cart_hover_background }}; }
  #add-bundle-to-cart:disabled { background: {{ section.settings.add_to_cart_disabled_background }}; color: {{ section.settings.add_to_cart_disabled_text_color }}; }

  /* Product Details Section */
  .product-details-section { background: {{ section.settings.product_details_background | default: '#ffffff' }}; padding: 0 20px; text-align: center; }
  .product-details-container { max-width: 1200px; margin: 0 auto; }
  .product_title_left { width: 100%; display: flex; flex-direction: column; justify-content: center; }
  .product-title { font-size: 2.5rem; font-weight: bold; margin-bottom: 15px; color: {{ section.settings.product_title_color | default: '#333' }}; }
  .product-price { font-size: 2rem; font-weight: bold; color: {{ section.settings.product_price_color | default: '#007bff' }}; margin-bottom: 15px; }
  .product-reviews { margin-bottom: 20px; color: {{ section.settings.product_reviews_color | default: '#666' }}; }
  .product-bullet-points ul { list-style: none; padding: 0; display: flex; flex-wrap: wrap; justify-content: center; gap: 20px; }
  .product-bullet-points li { background: {{ section.settings.bullet_point_background | default: '#f8f9fa' }}; padding: 8px 16px; border-radius: 20px; font-size: 14px; color: {{ section.settings.bullet_point_text_color | default: '#333' }}; }

  /* Bundle Title */
  .bundle-title { text-align: center; margin-bottom: 25px; font-size: 1.8rem; font-weight: bold; color: {{ section.settings.bundle_title_color | default: '#333' }}; }

  /* Best Deal Badge */
  .best-deal-badge { position: absolute; top: -8px; right: -8px; background: {{ section.settings.best_deal_background | default: '#ff4444' }}; color: {{ section.settings.best_deal_text_color | default: '#ffffff' }}; font-size: 10px; padding: 4px 8px; border-radius: 12px; font-weight: bold; text-transform: uppercase; letter-spacing: 0.5px; }

  /* Flavor Info Button */
  .flavor-info-btn { position: absolute; top: 8px; right: 8px; background: rgba(0,0,0,0.7); color: white; border: none; border-radius: 50%; width: 24px; height: 24px; font-size: 12px; cursor: pointer; display: flex; align-items: center; justify-content: center; }

  /* Flavor Popup */
  .flavor-popup { display: none; position: fixed; z-index: 1000; left: 0; top: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); }
  .flavor-popup-content { background-color: white; margin: 15% auto; padding: 20px; border-radius: 10px; width: 80%; max-width: 500px; position: relative; }
  .flavor-popup-close { position: absolute; top: 10px; right: 15px; font-size: 28px; font-weight: bold; cursor: pointer; color: #aaa; }
  .flavor-popup-close:hover { color: #000; }

  /* Sticky Bottom Bar */
  .sticky-bottom-bar { position: fixed; bottom: 0; left: 0; right: 0; background: {{ section.settings.sticky_bar_background | default: '#ffffff' }}; border-top: 2px solid {{ section.settings.sticky_bar_border | default: '#eee' }}; padding: 15px 20px; z-index: 999; box-shadow: 0 -2px 10px rgba(0,0,0,0.1); }
  .sticky-content { max-width: 1200px; margin: 0 auto; display: flex; justify-content: space-between; align-items: center; }
  .sticky-price { font-size: 1.5rem; font-weight: bold; color: {{ section.settings.sticky_price_color | default: '#007bff' }}; }
  #sticky-add-to-cart { background: {{ section.settings.add_to_cart_background }}; color: {{ section.settings.add_to_cart_text_color }}; border: none; padding: 12px 30px; border-radius: 8px; font-size: 16px; font-weight: bold; cursor: pointer; }
  #sticky-add-to-cart:hover { background: {{ section.settings.add_to_cart_hover_background }}; }
  #sticky-add-to-cart:disabled { background: {{ section.settings.add_to_cart_disabled_background }}; color: {{ section.settings.add_to_cart_disabled_text_color }}; cursor: not-allowed; }

  /* App Widgets */
  .app-widgets { margin-top: 20px; padding: 10px; background: {{ section.settings.app_widgets_background | default: '#ffffff' }}; border-radius: 8px; }

  /* Layout Styles */
  .bundle-section { display: flex; flex-direction: column; justify-content: center; padding: 20px; width: 100%; box-sizing: border-box; padding-bottom: 80px; }
  .bundle-container { display: flex; max-width: 1200px; width: 100%; flex-direction: row; gap: 20px; margin: 0 auto; }
  .bundle-image { flex: 1; display: flex; align-items: center; justify-content: center; position: sticky; top: 20px; aspect-ratio: 1/1; max-height: 500px; width: 100%; }
  .bundle-image img { max-width: 100%; max-height: 100%; object-fit: contain; border-radius: 10px; }
  .bundle-options { flex: 1; padding: 20px; width: 100%; }
  .bundle-tabs { display: flex; gap: 5px; padding: 5px; margin-bottom: 20px; border-radius: 6px; }
  .bundle-tab { width: 100%; padding: 10px 20px; border: 1px solid; cursor: pointer; border-radius: 6px; font-size: 16px; font-weight: bold; }
  .bundle-tab.active { background: #333; color: #fff; }
  .bundle-products { display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px; }
  .bundle-product { padding: 10px; text-align: center; align-items: center; border-radius: 10px; position: relative; }
  .bundle-product img { max-width: 80%; margin: auto; border-radius: 8px; }
  .bundle-product-actions { margin-top: 10px; }
  .select-btn { width: 100%; padding: 5px 10px; cursor: pointer; border-radius: 6px; font-size: 14px; }
  .quantity-controls { border-radius: 6px; display: flex; gap: 10px; justify-content: space-evenly; align-items: center; }
  .qty-minus, .qty-plus { padding: 5px 10px; cursor: pointer; font-size: 14px; }
  .progress-bar-container { margin-top: 20px; display: flex; align-items: center; gap: 15px; }
  .step-progress { display: flex; align-items: center; justify-content: space-between; max-width: 600px; margin: 0; padding: 0; position: relative; flex: 1; }
  .step-connector { flex: 1; height: 6px; background: {{ section.settings.progress_bar_fill_color | default: '#007bff' }}; position: absolute; top: 50%; left: 0; right: 0; z-index: 0; transform: translateY(-50%); border-radius: 3px; }
  .step-circle { width: 32px; height: 32px; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 14px; font-weight: bold; position: relative; z-index: 1; background: #ffffff; border: 3px solid {{ section.settings.progress_bar_fill_color | default: '#007bff' }}; color: {{ section.settings.progress_bar_fill_color | default: '#007bff' }}; cursor: pointer; transition: background 0.3s, border 0.3s, color 0.3s, transform 0.2s; box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1); }
  .step-circle:hover { transform: scale(1.1); }
  .step-circle.selected { background: {{ section.settings.progress_bar_fill_color | default: '#8A8AFF' }}; border: none; color: #ffffff; }
  .step-circle.selected .step-number { display: none; }
  .step-circle.selected::after { content: '✔'; font-size: 18px; color: #ffffff; }
  .step-circle.active { outline: 2px solid #0056b3; outline-offset: 4px; }
  .step-number { position: relative; z-index: 2; }
  .progress-text { font-size: 14px; font-weight: bold; min-width: 50px; text-align: right; }
  .bundle-price { font-size: 20px; font-weight: bold; margin-bottom: 20px; display: none; }
  #add-bundle-to-cart { margin-top: 10px; padding: 10px 20px; border: none; cursor: pointer; border-radius: 8px; width: 100%; font-size: 16px; }
  #add-bundle-to-cart:disabled { background: #ccc; cursor: not-allowed; }

  #subscription-widget-container {
  pointer-events: auto !important;
  position: relative;
  z-index: 10;
}
#subscription-widget-container input[type="radio"],
#subscription-widget-container label {
  pointer-events: auto !important;
  cursor: pointer;
}
.shopify_subscriptions_app_block_label {
  position: relative;
  z-index: 11;
}

  /* Responsive Design */
  @media screen and (max-width: 768px) {
    .product-title { font-size: 2rem; }
    .product-price { font-size: 1.5rem; }
    .product-bullet-points ul { flex-direction: column; align-items: center; }
    .bundle-container { flex-direction: column; gap: 10px; }
    .bundle-image { position: static; max-height: 400px; width: 100%; margin: 0 auto; }
    .bundle-options { padding: 10px; }
    .bundle-tabs { flex-direction: row; gap: 5px; }
    .bundle-tab { padding: 8px 10px; font-size: 14px; }
    .bundle-products { grid-template-columns: repeat(2, 1fr); gap: 15px; }
    .bundle-product img { max-width: 90%; }
    .select-btn, .qty-minus, .qty-plus { font-size: 12px; padding: 5px; }
    #add-bundle-to-cart { font-size: 14px; padding: 8px 15px; }
    .progress-text { font-size: 12px; }
    .step-progress { max-width: 400px; padding: 0 10px; }
    .step-connector { height: 4px; }
    .step-circle { width: 24px; height: 24px; font-size: 12px; }
    .step-circle.selected::after { font-size: 14px; }
    .step-circle.active { outline-width: 4px; outline-offset: 2px; }
    .step-circle:hover { transform: scale(1.05); }
    .sticky-content { flex-direction: column; gap: 10px; }
    .sticky-price { font-size: 1.2rem; }
  }

  @media screen and (max-width: 480px) {
    .bundle-section { padding: 10px; }
    .bundle-image { max-height: 300px; }
    .bundle-tabs { flex-direction: row; gap: 3px; }
    .bundle-tab { font-size: 12px; padding: 6px 8px; }
    .bundle-products { grid-template-columns: repeat(2, 1fr); gap: 10px; }
    .bundle-product { padding: 5px; }
    .bundle-product img { max-width: 100%; }
    .select-btn, .qty-minus, .qty-plus { font-size: 10px; padding: 4px; }
    #add-bundle-to-cart { font-size: 12px; padding: 6px 10px; }
    .progress-bar-container { margin-top: 15px; }
    .progress-text { font-size: 10px; }
    .step-progress { max-width: 300px; padding: 0 5px; }
    .step-connector { height: 3px; }
    .step-circle { width: 20px; height: 20px; font-size: 10px; }
    .step-circle.selected::after { font-size: 12px; }
    .step-circle.active { outline-width: 3px; outline-offset: 1px; }
    .step-circle:hover { transform: none; }
  }
</style>

<script>
  // Flavor popup functions
  function showFlavorInfo(info, title) {
    document.getElementById('flavor-popup-title').textContent = title;
    document.getElementById('flavor-popup-info').textContent = info;
    document.getElementById('flavor-popup').style.display = 'block';
  }

  // Close flavor popup
  document.addEventListener('click', function(event) {
    const popup = document.getElementById('flavor-popup');
    const closeBtn = document.querySelector('.flavor-popup-close');
    if (event.target === popup || event.target === closeBtn) {
      popup.style.display = 'none';
    }
  });

  document.addEventListener("DOMContentLoaded", () => {
    const tabs = document.querySelectorAll(".bundle-tab");
    const selectBtns = document.querySelectorAll(".select-btn");
    const stepIndicator = document.querySelector('#bundle-step-indicator');
    const progressText = document.querySelector(".progress-text");
    const bundlePrice = document.querySelector(".bundle-price");
    const addButton = document.getElementById("add-bundle-to-cart");
    const stickyAddButton = document.getElementById("sticky-add-to-cart");
    const stickyPrice = document.getElementById("sticky-price");
    const mainProductPrice = document.getElementById("main-product-price");
    const variantInput = document.getElementById("selected-variant-id");

    let selectedProducts = [];
    let activeBundle = "1";
    let manualBundleSelection = false;

    const MAX_TOTAL_PRODUCTS = 12; // Maximum products allowed (for all bundles)

    // Price configuration
    const USE_AUTO_PRICES = {{ section.settings.use_auto_prices | default: true }};
    
    const prices = {
      1: {
        oneTime: USE_AUTO_PRICES ? "{{ variant1.price | money }}" : "{{ section.settings.manual_price_1 | money }}",
        subscription: USE_AUTO_PRICES ? "{{ variant1.metafields.subscriptions.discount_price | money | default: variant1.price | times: 0.8 | money }}" : "{{ section.settings.manual_subscription_price_1 | money | default: section.settings.manual_price_1 | times: 0.8 | money }}"
      },
      2: {
        oneTime: USE_AUTO_PRICES ? "{{ variant2.price | money }}" : "{{ section.settings.manual_price_2 | money }}",
        subscription: USE_AUTO_PRICES ? "{{ variant2.metafields.subscriptions.discount_price | money | default: variant2.price | times: 0.8 | money }}" : "{{ section.settings.manual_subscription_price_2 | money | default: section.settings.manual_price_2 | times: 0.8 | money }}"
      },
      3: {
        oneTime: USE_AUTO_PRICES ? "{{ variant3.price | money }}" : "{{ section.settings.manual_price_3 | money }}",
        subscription: USE_AUTO_PRICES ? "{{ variant3.metafields.subscriptions.discount_price | money | default: variant3.price | times: 0.8 | money }}" : "{{ section.settings.manual_subscription_price_3 | money | default: section.settings.manual_price_3 | times: 0.8 | money }}"
      }
    };

    const limits = {
      1: Number.parseInt("{{ section.settings.bundle_limit_1 }}"),
      2: Number.parseInt("{{ section.settings.bundle_limit_2 }}"),
      3: Number.parseInt("{{ section.settings.bundle_limit_3 }}"),
    };

    const freeProducts = {
      1: 1, // 1 free product for Bundle 1
      2: 2, // 2 free products for Bundle 2
      3: 0, // No free products for Bundle 3
    };

    const bundleVariantIds = {
      1: "{{ variant1.id }}",
      2: "{{ variant2.id }}",
      3: "{{ variant3.id }}",
    };

    const allBundleProducts = document.querySelectorAll(".bundle-product");
    limits[3] = allBundleProducts.length; // Should be based on product blocks only

    const maxTotalForBundle = {
      1: limits["1"] + freeProducts["1"], // 3 + 1 = 4
      2: limits["2"] + freeProducts["2"], // 5 + 2 = 7
      3: limits["3"], // Based on product blocks (e.g., 12)
    };

    // Update prices dynamically based on subscription selection
    function updatePrices() {
      const isSubscription = isSubscriptionSelected(); // Check from widget
      const currentPrice = isSubscription ? prices[activeBundle].subscription : prices[activeBundle].oneTime;

      if (bundlePrice) bundlePrice.textContent = currentPrice;
      if (stickyPrice) stickyPrice.textContent = currentPrice;
      if (mainProductPrice) mainProductPrice.textContent = currentPrice;
      if (variantInput) variantInput.value = bundleVariantIds[activeBundle];

      // Update subscription widget prices
      updateSubscriptionWidget();
    }

    // Check if subscription is selected in the app widget
    function isSubscriptionSelected() {
      const checkedRadio = document.querySelector('#subscription-widget-container input[name^="purchaseOption_"]:checked');
      return checkedRadio && checkedRadio.dataset.radioType === 'selling_plan';
    }

    // Get selected selling plan ID from app widget
    function getSelectedSellingPlanId() {
      const selectedRadio = document.querySelector('#subscription-widget-container input[data-radio-type="selling_plan"]:checked');
      return selectedRadio ? selectedRadio.dataset.sellingPlanId : null;
    }

    function updateSubscriptionWidget(forceOneTime = false) {
      const widgetContainer = document.querySelector('#subscription-widget-container');
      if (!widgetContainer) return;

      const variantId = bundleVariantIds[activeBundle];
      const oneTimePrice = prices[activeBundle].oneTime;
      const subscriptionPrice = prices[activeBundle].subscription;

      // Update displayed prices in widget (app-specific selectors)
      const oneTimePriceEl = widgetContainer.querySelector('.shopify_subscriptions_in_widget_price:not(.allocation_price)');
      const subscriptionPriceEls = widgetContainer.querySelectorAll('.allocation_price');
      
      if (oneTimePriceEl) oneTimePriceEl.textContent = oneTimePrice;
      subscriptionPriceEls.forEach(el => {
        el.textContent = subscriptionPrice; // Or use data attributes if needed
      });

      // Update variant in widget inputs
      widgetContainer.querySelectorAll('input[data-variant-id]').forEach(input => {
        input.dataset.variantId = variantId;
      });

      // DO NOT reset radios aggressively – let user select
      // Only set one-time if forced (initial load)
      if (forceOneTime) {
        const oneTimeRadio = widgetContainer.querySelector('input[data-radio-type="one_time_purchase"]');
        if (oneTimeRadio) oneTimeRadio.checked = true;
        widgetContainer.querySelectorAll('input[data-radio-type="selling_plan"]').forEach(radio => radio.checked = false);
      }

      // Prevent ONLY form submission and add-to-cart buttons in widget
      const widgetForm = widgetContainer.closest('form') || widgetContainer.querySelector('form');
      if (widgetForm) {
        widgetForm.addEventListener('submit', (e) => {
          e.preventDefault();
          e.stopPropagation();
          return false;
        });
      }

      // Prevent only submit buttons, not radios/labels
      widgetContainer.querySelectorAll('button[type="submit"], .add-to-cart, input[type="submit"]').forEach(btn => {
        btn.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
        });
      });

      // Ensure radios and labels are clickable
      widgetContainer.querySelectorAll('input[type="radio"], label').forEach(el => {
        el.style.pointerEvents = 'auto';
        el.style.cursor = 'pointer';
      });

      // Sync radio changes (dynamic name starts with "purchaseOption_")
      widgetContainer.querySelectorAll('input[name^="purchaseOption_"]').forEach(radio => {
        radio.removeEventListener('change', handleWidgetRadioChange);
        radio.addEventListener('change', handleWidgetRadioChange);
      });
    }

    // Handle radio change for sync
    function handleWidgetRadioChange(e) {
      console.log('Widget radio changed:', e.target.value, e.target.dataset.radioType); // Debug
      updatePrices(); // Sync price display
    }

    function updateProgress() {
      const totalCount = selectedProducts.reduce((sum, p) => sum + p.qty, 0);

      if (!manualBundleSelection) {
        let newBundle = activeBundle;

        if (totalCount <= 4) {
          newBundle = "1";
        } else if (totalCount >= 5 && totalCount <= 7) {
          newBundle = "2";
        } else if (totalCount >= 8) {
          newBundle = "3";
        }

        if (newBundle !== activeBundle) {
          activeBundle = newBundle;
          tabs.forEach((t) => t.classList.remove("active"));
          const newTab = document.querySelector(`.bundle-tab[data-bundle="${activeBundle}"]`);
          if (newTab) {
            newTab.classList.add("active");
            updatePrices();
          }
        }
      }

      // Update step progress
      stepIndicator.innerHTML = '<div class="step-connector"></div>';
      const maxTotal = maxTotalForBundle[activeBundle];
      for (let i = 0; i < maxTotal; i++) {
        const step = document.createElement('div');
        step.className = 'step-circle';
        step.dataset.step = (i + 1).toString();
        const stepNum = document.createElement('span');
        stepNum.className = 'step-number';
        stepNum.textContent = i + 1;
        step.appendChild(stepNum);

        if (i + 1 <= totalCount) {
          step.classList.add('selected');
        } else if (i + 1 === Math.min(totalCount + 1, maxTotal)) {
          step.classList.add('active');
        }

        stepIndicator.appendChild(step);
      }

      progressText.textContent = `${totalCount}/${maxTotal}`;

      // Message logic for free products
      const messageElement = document.getElementById("bundle-message");
      if (messageElement) {
        if (totalCount === 2) {
          messageElement.textContent = "Add 1 more product to get 1 free.";
        } else if (totalCount === 5) {
          messageElement.textContent = "Get 2 free.";
        } else if (totalCount === 4 || totalCount === 7 || totalCount === 12) {
          messageElement.textContent = "Congratulations! You've added enough items to your bundle.";
        } else {
          messageElement.textContent = ""; 
        }
      }

      // Validation logic
      let shouldDisable = false;
      let buttonText = "Add Bundle to Cart";

      if (activeBundle === "1" && totalCount < 4) {
        shouldDisable = true;
        buttonText = `Add ${4 - totalCount} more items`;
      } else if (activeBundle === "2" && totalCount < 7) {
        shouldDisable = true;
        buttonText = `Add ${7 - totalCount} more items`;
      } else if (activeBundle === "3" && totalCount < 12) {
        shouldDisable = true;
        buttonText = `Add ${12 - totalCount} more items`;
      }

      addButton.disabled = shouldDisable;
      addButton.textContent = buttonText;
      
      if (stickyAddButton) {
        stickyAddButton.disabled = shouldDisable;
        stickyAddButton.textContent = buttonText;
      }
    }

    function simulateClick(btn, markFree = false) {
      const parent = btn.closest(".bundle-product");
      const productId = parent.dataset.productId;
      const totalSelected = selectedProducts.reduce((sum, p) => sum + p.qty, 0);

      if (totalSelected >= MAX_TOTAL_PRODUCTS) return;

      const variantId = parent.dataset.variantId;
      const productTitle = parent.dataset.productTitle;

      const existing = selectedProducts.find((p) => p.id === productId && p.isFree === markFree);
      if (existing) {
        existing.qty = Math.min(existing.qty + 1, MAX_TOTAL_PRODUCTS);
      } else {
        selectedProducts.push({
          id: productId,
          variantId: variantId,
          qty: 1,
          title: productTitle,
          isFree: markFree,
        });
      }

      btn.style.display = "none";
      const qtyControls = parent.querySelector(".quantity-controls");
      qtyControls.style.display = "flex";
      parent.querySelector(".qty-value").textContent = existing ? existing.qty : "1";

      parent.querySelector(".qty-plus").onclick = () => adjustQty(productId, 1, parent, markFree);
      parent.querySelector(".qty-minus").onclick = () => adjustQty(productId, -1, parent, markFree);

      manualBundleSelection = false;
      updateProgress();
    }

    function adjustQty(productId, delta, parent, markFree) {
      const item = selectedProducts.find((p) => p.id === productId && p.isFree === markFree);
      if (!item) return;

      const totalSelected = selectedProducts.reduce((sum, p) => sum + p.qty, 0);
      if (delta > 0 && totalSelected >= MAX_TOTAL_PRODUCTS) return;

      item.qty += delta;

      if (item.qty <= 0) {
        selectedProducts = selectedProducts.filter((p) => !(p.id === productId && p.isFree === markFree));
        parent.querySelector(".quantity-controls").style.display = "none";
        parent.querySelector(".select-btn").style.display = "block";
      } else {
        parent.querySelector(".qty-value").textContent = item.qty;
      }

      manualBundleSelection = false;
      updateProgress();
    }

    selectBtns.forEach((btn) => {
      btn.addEventListener("click", () => {
        const totalSelected = selectedProducts.reduce((sum, p) => sum + p.qty, 0);
        if (totalSelected >= MAX_TOTAL_PRODUCTS) return;

        const parent = btn.closest(".bundle-product");
        const productId = parent.dataset.productId;
        const alreadySelectedFree = selectedProducts.find((p) => p.id === productId && p.isFree);
        if (!alreadySelectedFree) {
          manualBundleSelection = false;
          const shouldMarkFree = activeBundle !== "3"; // No free products for Bundle 3
          simulateClick(btn, shouldMarkFree);
        }
      });
    });

    tabs.forEach((tab) => {
      tab.addEventListener("click", () => {
        switchBundle(tab.dataset.bundle);
      });
    });

    function switchBundle(bundleIndex) {
      if (activeBundle === bundleIndex) return;

      manualBundleSelection = true;
      tabs.forEach((t) => t.classList.remove("active"));
      const newTab = document.querySelector(`.bundle-tab[data-bundle="${bundleIndex}"]`);
      if (newTab) {
        newTab.classList.add("active");
        activeBundle = bundleIndex;
        updatePrices();
        autoSelectProductsForBundle(bundleIndex);
        manualBundleSelection = false;
        updateProgress();
      }
    }

    function autoSelectProductsForBundle(bundleIndex) {
      selectedProducts = [];

      allBundleProducts.forEach((product) => {
        product.querySelector(".quantity-controls").style.display = "none";
        product.querySelector(".select-btn").style.display = "block";
      });

      // Select products based on bundle
      let productsToSelect;
      if (bundleIndex === "3") {
        productsToSelect = 12; // Exactly 12 products for Bundle 3
      } else {
        productsToSelect = bundleIndex === "1" ? 3 : bundleIndex === "2" ? 5 : 12;
      }

      const maxToSelect = Math.min(productsToSelect, allBundleProducts.length);

      for (let i = 0; i < maxToSelect; i++) {
        const product = allBundleProducts[i];
        const selectBtn = product.querySelector(".select-btn");
        if (selectBtn) {
          const shouldMarkFree = bundleIndex !== "3"; // No free products for Bundle 3
          simulateClick(selectBtn, shouldMarkFree);
        }
      }
    }

    // Handle both add to cart buttons (prevents duplicates)
    const handleAddToCart = async (e) => {
      e.preventDefault();
      e.stopPropagation();

      if (selectedProducts.length === 0) return alert("Select at least one product.");

      const totalCount = selectedProducts.reduce((sum, p) => sum + p.qty, 0);

      // Auto-determine the correct variant based on total products
      let variantToUse = activeBundle;
      if (totalCount >= 12) {
        variantToUse = "3"; // Use All Pack for 12 products
      } else if (totalCount >= 5) {
        variantToUse = "2"; // Use 5-pack for 5-11 products
      } else {
        variantToUse = "1"; // Use 3-pack for 3-4 products
      }

      const variantId = bundleVariantIds[variantToUse];
      if (!variantId) return alert("Variant not found for this bundle.");

      const properties = { "_Bundle_Type": document.querySelector(".bundle-tab.active").textContent };
      const sortedProducts = [...selectedProducts].sort((a, b) => a.id.localeCompare(b.id));

      let freeItemsCount = 0;
      if (variantToUse === "1") {
        freeItemsCount = Math.min(1, totalCount - 3);
      } else if (variantToUse === "2") {
        freeItemsCount = Math.min(2, totalCount - 5);
      }
      // Bundle 3 has no free items

      let itemIndex = 0;
      let freeItemsMarked = 0;

      sortedProducts.forEach((p) => {
        for (let i = 0; i < p.qty; i++) {
          itemIndex++;
          const isThisItemFree = freeItemsMarked < freeItemsCount && itemIndex > (variantToUse === "1" ? 3 : 5);
          if (isThisItemFree) freeItemsMarked++;
          properties[`Item ${itemIndex}`] = `1 x ${p.title}${isThisItemFree ? " (Free)" : ""}`;
        }
      });

      // Get selling plan from widget (using data-selling-plan-id)
      const sellingPlanId = getSelectedSellingPlanId();
      console.log('Selected Selling Plan ID:', sellingPlanId); // Debug

      // Temporarily disable widget inputs to prevent interference
      document.querySelectorAll('#subscription-widget-container input, #subscription-widget-container button').forEach(el => el.disabled = true);

      try {
        const cartData = {
          items: [{
            id: variantId,
            quantity: 1,
            properties: properties,
            ...(sellingPlanId && { selling_plan: sellingPlanId })
          }]
        };

        console.log('Adding to cart:', cartData); // Debug log

        const res = await fetch("/cart/add.js", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(cartData)
        });
        const data = await res.json();
        if (!res.ok) throw new Error(data.description || "Failed to add bundle");
        
        console.log('Added Item Response:', data); // Check selling_plan_allocation
        
        window.location.href = "/cart";
      } catch (err) {
        alert(err.message);
        console.error(err);
      } finally {
        // Re-enable widget
        document.querySelectorAll('#subscription-widget-container input, #subscription-widget-container button').forEach(el => el.disabled = false);
      }
    };

    addButton.addEventListener("click", handleAddToCart);
    if (stickyAddButton) {
      stickyAddButton.addEventListener("click", handleAddToCart);
    }

    // Global prevent for any app widget forms
    document.querySelectorAll('.app-widgets form').forEach(form => {
      form.addEventListener('submit', e => e.preventDefault());
    });

    // Initialize
    autoSelectProductsForBundle(activeBundle);
    updatePrices();
    updateProgress();

    // Additional: Ensure widget clickable on load
    const widgetContainer = document.querySelector('#subscription-widget-container');
    if (widgetContainer) {
      widgetContainer.style.pointerEvents = 'auto';
      widgetContainer.style.zIndex = '10';
    }
  });
</script>

{% schema %}
{
  "name": "Bundle Selector",
  "settings": [
    {
      "type": "header",
      "content": "Product Details Section"
    },
    {
      "type": "checkbox",
      "id": "show_product_details",
      "label": "Show Product Details Section",
      "default": true
    },
    {
      "type": "text",
      "id": "product_title",
      "label": "Custom Product Title",
      "info": "Leave empty to use product title"
    },
    {
      "type": "textarea",
      "id": "product_reviews",
      "label": "Product Reviews/Rating HTML",
      "info": "Add your review widget HTML here"
    },
    {
      "type": "textarea",
      "id": "product_bullet_points",
      "label": "Product Bullet Points",
      "info": "Separate each point with | (pipe character)",
      "default": "Free Shipping|30-Day Returns|Premium Quality"
    },
    {
      "type": "header",
      "content": "Bundle Configuration"
    },
    {
      "type": "text",
      "id": "bundle_title",
      "label": "Bundle Section Title",
      "default": "Choose Your Bundle"
    },
    {
      "type": "text",
      "id": "select_text",
      "label": "Select Products Text",
      "default": "Select Products"
    },
    {
      "type": "text",
      "id": "bundle_name_1",
      "label": "First Bundle Name",
      "default": "3 Pack"
    },
    {
      "type": "text",
      "id": "bundle_tab_text_1",
      "label": "First Bundle Tab Text (Editable)",
      "default": "3 Pack + 1 Free",
      "info": "This text appears on the tab button"
    },
    {
      "type": "number",
      "id": "bundle_limit_1",
      "label": "First Bundle Limit (Paid Products)",
      "default": 3
    },
    {
      "type": "checkbox",
      "id": "show_bundle_1",
      "label": "Show First Bundle",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_best_deal_1",
      "label": "Show Best Deal Badge on Bundle 1",
      "default": false
    },
    {
      "type": "text",
      "id": "manual_price_1",
      "label": "Manual Price for Bundle 1",
      "info": "Used if auto prices are disabled"
    },
    {
      "type": "text",
      "id": "manual_subscription_price_1",
      "label": "Manual Subscription Price for Bundle 1",
      "info": "Used if auto prices are disabled"
    },
    {
      "type": "text",
      "id": "bundle_name_2",
      "label": "Second Bundle Name",
      "default": "5 Pack"
    },
    {
      "type": "text",
      "id": "bundle_tab_text_2",
      "label": "Second Bundle Tab Text (Editable)",
      "default": "5 Pack + 2 Free",
      "info": "This text appears on the tab button"
    },
    {
      "type": "number",
      "id": "bundle_limit_2",
      "label": "Second Bundle Limit (Paid Products)",
      "default": 5
    },
    {
      "type": "checkbox",
      "id": "show_bundle_2",
      "label": "Show Second Bundle",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_best_deal_2",
      "label": "Show Best Deal Badge on Bundle 2",
      "default": true
    },
    {
      "type": "text",
      "id": "manual_price_2",
      "label": "Manual Price for Bundle 2",
      "info": "Used if auto prices are disabled"
    },
    {
      "type": "text",
      "id": "manual_subscription_price_2",
      "label": "Manual Subscription Price for Bundle 2",
      "info": "Used if auto prices are disabled"
    },
    {
      "type": "text",
      "id": "bundle_name_3",
      "label": "All Pack Bundle Name",
      "default": "All Pack"
    },
    {
      "type": "text",
      "id": "bundle_tab_text_3",
      "label": "Third Bundle Tab Text (Editable)",
      "default": "All Pack",
      "info": "This text appears on the tab button"
    },
    {
      "type": "number",
      "id": "bundle_limit_3",
      "label": "All Pack Limit (Auto-calculated)",
      "default": 12,
      "info": "This will be auto-calculated based on available products"
    },
    {
      "type": "checkbox",
      "id": "show_bundle_3",
      "label": "Show All Pack Bundle",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_best_deal_3",
      "label": "Show Best Deal Badge on Bundle 3",
      "default": false
    },
    {
      "type": "text",
      "id": "best_deal_text",
      "label": "Best Deal Badge Text",
      "default": "Best Deal"
    },
    {
      "type": "checkbox",
      "id": "use_auto_prices",
      "label": "Use Auto Prices from Variants",
      "default": true
    },
    {
      "type": "text",
      "id": "manual_price_3",
      "label": "Manual Price for Bundle 3",
      "info": "Used if auto prices are disabled"
    },
    {
      "type": "text",
      "id": "manual_subscription_price_3",
      "label": "Manual Subscription Price for Bundle 3",
      "info": "Used if auto prices are disabled"
    },
    {
      "type": "header",
      "content": "Product Details Colors"
    },
    {
      "type": "color",
      "id": "product_details_background",
      "label": "Product Details Background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "product_title_color",
      "label": "Product Title Color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "product_price_color",
      "label": "Product Price Color",
      "default": "#007bff"
    },
    {
      "type": "color",
      "id": "product_reviews_color",
      "label": "Product Reviews Color",
      "default": "#666666"
    },
    {
      "type": "color",
      "id": "bullet_point_background",
      "label": "Bullet Point Background",
      "default": "#f8f9fa"
    },
    {
      "type": "color",
      "id": "bullet_point_text_color",
      "label": "Bullet Point Text Color",
      "default": "#333333"
    },
    {
      "type": "header",
      "content": "Bundle Title Colors"
    },
    {
      "type": "color",
      "id": "bundle_title_color",
      "label": "Bundle Title Color",
      "default": "#333333"
    },
    {
      "type": "header",
      "content": "Best Deal Badge Colors"
    },
    {
      "type": "color",
      "id": "best_deal_background",
      "label": "Best Deal Badge Background",
      "default": "#ff4444"
    },
    {
      "type": "color",
      "id": "best_deal_text_color",
      "label": "Best Deal Badge Text Color",
      "default": "#ffffff"
    },
    {
      "type": "header",
      "content": "Sticky Bar Colors"
    },
    {
      "type": "color",
      "id": "sticky_bar_background",
      "label": "Sticky Bar Background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "sticky_bar_border",
      "label": "Sticky Bar Border Color",
      "default": "#eeeeee"
    },
    {
      "type": "color",
      "id": "sticky_price_color",
      "label": "Sticky Price Color",
      "default": "#007bff"
    },
    {
      "type": "header",
      "content": "App Widgets Colors"
    },
    {
      "type": "color",
      "id": "app_widgets_background",
      "label": "App Widgets Background",
      "default": "#ffffff"
    },
    {
      "type": "header",
      "content": "Main Color Customization"
    },
    {
      "type": "color",
      "id": "section_background_color",
      "label": "Section Background Color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "options_background_color",
      "label": "Options Panel Background",
      "default": "#ffffff"
    },
    {
      "type": "header",
      "content": "Bundle Tabs Colors"
    },
    {
      "type": "color",
      "id": "tabs_container_background",
      "label": "Tabs Container Background",
      "default": "#F1F1F1"
    },
    {
      "type": "color",
      "id": "tab_background_color",
      "label": "Tab Background Color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "tab_text_color",
      "label": "Tab Text Color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "tab_border_color",
      "label": "Tab Border Color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "tab_active_background",
      "label": "Active Tab Background",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "tab_active_text_color",
      "label": "Active Tab Text Color",
      "default": "#ffffff"
    },
    {
      "type": "header",
      "content": "Product Cards Colors"
    },
    {
      "type": "color",
      "id": "product_card_background",
      "label": "Product Card Background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "product_card_border",
      "label": "Product Card Border",
      "default": "transparent"
    },
    {
      "type": "header",
      "content": "Select Button Colors"
    },
    {
      "type": "color",
      "id": "select_button_background",
      "label": "Select Button Background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "select_button_text_color",
      "label": "Select Button Text Color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "select_button_border",
      "label": "Select Button Border",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "select_button_hover_background",
      "label": "Select Button Hover Background",
      "default": "#f5f5f5"
    },
    {
      "type": "header",
      "content": "Quantity Controls Colors"
    },
    {
      "type": "color",
      "id": "quantity_background",
      "label": "Quantity Controls Background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "quantity_border_color",
      "label": "Quantity Controls Border",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "quantity_button_background",
      "label": "Quantity Button Background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "quantity_button_text_color",
      "label": "Quantity Button Text Color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "quantity_button_border",
      "label": "Quantity Button Border",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "quantity_button_hover_background",
      "label": "Quantity Button Hover Background",
      "default": "#f5f5f5"
    },
    {
      "type": "color",
      "id": "quantity_text_color",
      "label": "Quantity Number Text Color",
      "default": "#333333"
    },
    {
      "type": "header",
      "content": "Progress Bar Colors"
    },
    {
      "type": "color",
      "id": "progress_bar_background",
      "label": "Progress Bar Background",
      "default": "#F1F1F1"
    },
    {
      "type": "color",
      "id": "progress_bar_fill_color",
      "label": "Progress Bar Fill Color",
      "default": "#007bff"
    },
    {
      "type": "color",
      "id": "progress_text_color",
      "label": "Progress Text Color",
      "default": "#333333"
    },
    {
      "type": "header",
      "content": "Price & Add to Cart Colors"
    },
    {
      "type": "color",
      "id": "price_text_color",
      "label": "Price Text Color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "add_to_cart_background",
      "label": "Add to Cart Button Background",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "add_to_cart_text_color",
      "label": "Add to Cart Button Text Color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "add_to_cart_hover_background",
      "label": "Add to Cart Button Hover Background",
      "default": "#555555"
    },
    {
      "type": "color",
      "id": "add_to_cart_disabled_background",
      "label": "Add to Cart Button Disabled Background",
      "default": "#cccccc"
    },
    {
      "type": "color",
      "id": "add_to_cart_disabled_text_color",
      "label": "Add to Cart Button Disabled Text Color",
      "default": "#666666"
    }
  ],
  "blocks": [
    {
      "type": "product",
      "name": "Product",
      "settings": [
        {
          "type": "product",
          "id": "product",
          "label": "Select Product"
        },
        {
          "type": "image_picker",
          "id": "custom_image",
          "label": "Custom Default Image",
          "info": "Optional: Select a custom image to display instead of the product's default image."
        },
        {
          "type": "textarea",
          "id": "flavor_info",
          "label": "Flavor Information",
          "info": "Add detailed flavor description for popup"
        }
      ]
    },
    { "type": "@app" }
  ],
  "presets": [
    {
      "name": "Bundle Selector",
      "category": "Custom"
    }
  ]
}
{% endschema %}